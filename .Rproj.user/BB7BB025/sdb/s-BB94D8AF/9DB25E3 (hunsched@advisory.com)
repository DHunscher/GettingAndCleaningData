{
    "contents" : "# run_analysis.R \n# \n# This script does the following:\n# 1. Merges the training and the test sets to create one data set.\n# 2. Extracts only the measurements on the mean and standard deviation for each \n#       measurement. \n# 3. Uses descriptive activity names to name the activities in the data set\n# 4. Appropriately labels the data set with descriptive variable names. \n# 5. From the data set in step 4, creates a second, independent tidy data set \n#       with the average of each variable for each activity and each subject.\n# \n# Inputs:\n#       UCI.HAR.Dataset.Folder :        folder containing unzipped contents of \n#                                       the UCI HAR data set.\n#                               \nlibrary(data.table)\nlibrary(plyr)\nlibrary(stringr)\nlibrary(LaF)\nlibrary(reshape2)\nlibrary(dplyr)\n\n# generic string substitute function for use with *apply\nsubst <- function(s,findme,replacewith) {\n  s2 <- str_replace(s,findme,replacewith)\n}\n\n# get col numbers and names for means & std devs\ndesiredCols <- function(UCI.HAR.Dataset.Folder) {\n  fn <- paste(UCI.HAR.Dataset.Folder,\"features.txt\",sep=\"/\")\n  f <- read.delim(fn,sep=' ',header=F)\n  x <- NULL\n  for(i in 1:length(f[,1])) {\n    if(!is.na(as.numeric(str_locate(f[i,2],\"mean\")[1,1]))) {\n      x <- rbind(x,as.numeric(f[i,1]))\n    }\n  }\n  for(i in 1:length(f[,1])) {\n    if(!is.na(as.numeric(str_locate(f[i,2],\"std\")[1,1]))) {\n      x <- rbind(x,as.numeric(f[i,1]))\n    }\n  }\n  n <- as.character(f[sort(x),2])\n  n <- as.character(sapply(n,subst,'BodyBody','Body'))\n  n <- as.character(sapply(n,subst,'Body','Body '))\n  n <- as.character(sapply(n,subst,'Acc','Acceleration '))\n  n <- as.character(sapply(n,subst,'Gyro','Gyroscopic '))\n  n <- as.character(sapply(n,subst,'std','Standard Deviation '))\n  n <- as.character(sapply(n,subst,'Mag','Magnitude '))\n  n <- as.character(sapply(n,subst,'Gravity','Gravity '))\n  n <- as.character(sapply(n,subst,'Jerk','Jerk '))\n  n <- as.character(sapply(n,subst,'X$','X axis'))\n  n <- as.character(sapply(n,subst,'Y$','Y axis'))\n  n <- as.character(sapply(n,subst,'Z$','Z axis'))\n  n <- as.character(sapply(n,subst,'-',' '))\n  n <- as.character(sapply(n,subst,'^t','Time domain: '))\n  n <- as.character(sapply(n,subst,'meanFreq','Mean of Frequency '))\n  n <- as.character(sapply(n,subst,'^f','Frequency domain: '))\n  n <- as.character(sapply(n,subst,'[()]',''))\n  n <- as.character(sapply(n,subst,'[()]',''))\n  n <- as.character(sapply(n,subst,' $',''))\n  n <- as.character(sapply(n,subst,' -','-'))\n  n <- as.character(sapply(n,subst,'  ',' '))\n  return(list(sort(x),n))\n}\n\ngetDatasetFilename <- function(UCI.HAR.Dataset.Folder,set.Folder) {\n  fn <- sprintf(\"%s/%s/X_%s.txt\",UCI.HAR.Dataset.Folder,\n                set.Folder,\n                set.Folder)\n  return(fn)\n}\n\ngetActivityColumnFilename <- function(UCI.HAR.Dataset.Folder,set.Folder) {\n  fn <- sprintf(\"%s/%s/y_%s.txt\",UCI.HAR.Dataset.Folder,\n                set.Folder,\n                set.Folder)\n  return(fn)\n}\n\ngetActivityNamesFilename <- function(UCI.HAR.Dataset.Folder) {\n  fn <- sprintf(\"%s/activity_labels.txt\",UCI.HAR.Dataset.Folder)\n  return(fn)\n}\n\ngetSubjectColumnFilename <- function(UCI.HAR.Dataset.Folder,set.Folder) {\n  fn <- sprintf(\"%s/%s/subject_%s.txt\",UCI.HAR.Dataset.Folder,\n                set.Folder,\n                set.Folder)\n  return(fn)\n}\n\ngetActivityColumn <- function(UCI.HAR.Dataset.Folder,set.Folder) {\n  fn <- getActivityNamesFilename(UCI.HAR.Dataset.Folder)\n  activityNames <- read.delim(fn,sep=\" \",header=FALSE)\n  activityNames[,1] <- as.integer(activityNames[,1])\n  activityNames[,2] <- as.character(activityNames[,2])\n  fn <- getActivityColumnFilename(UCI.HAR.Dataset.Folder,set.Folder)\n  activityCol <- read.delim(fn,header=FALSE)\n  names <- NULL\n  for (val in activityCol[,1]) {\n    for (i in 1:length(activityNames[,1])) {\n      if (val == activityNames[i,1]) {\n        names <- rbind(names,activityNames[i,2])\n        break\n      }\n    }\n  }\n  return(names)\n}\n\ngetSubjectColumn <- function(UCI.HAR.Dataset.Folder,set.Folder) {\n  fn <- getSubjectColumnFilename(UCI.HAR.Dataset.Folder,set.Folder)\n  subjectCol <- read.delim(fn,header=FALSE)\n  subjectCol[,1] <- as.integer(subjectCol[,1])\n  return(subjectCol)\n}\n\n# call with getDataSet('UCI-HAR-Dataset','test')\ngetDataSet <- function(UCI.HAR.Dataset.Folder,set.Folder) {\n  fn <- getDatasetFilename(UCI.HAR.Dataset.Folder,\n                           set.Folder)\n  subjectCol <- getSubjectColumn(UCI.HAR.Dataset.Folder,\n                                 set.Folder)\n  activityCol <- getActivityColumn(UCI.HAR.Dataset.Folder,\n                                 set.Folder)\n  numRows <- length(activityCol)\n  x <- desiredCols(UCI.HAR.Dataset.Folder)\n  \n  colNumbers <- x[[1]]\n  colNames <- c(\"Subject\",\"Activity\",x[[2]])\n  \n  bufSize <- 1000\n  dataSet <- NULL\n  startRow <- 1\n  laf <- laf_open_fwf(fn,\n                      column_types=rep(\"double\",561),\n                      column_widths=rep(16,561))\n  \n  # loop through the very large data set, bufSize rows at a time,\n  # reducing to just the columns we need.\n  while(startRow < numRows) {\n    rows <- next_block(laf,nrows=bufSize)\n    rows <- rows[,colNumbers]\n    dataSet <- rbind(dataSet,rows)\n    startRow <- startRow + bufSize\n  }\n  # Also add columns to identify the subject and activity for each row\n  dataSet <- cbind(activityCol,dataSet)\n  dataSet <- cbind(subjectCol,dataSet)\n  colnames(dataSet) <- colNames\n  return(dataSet)\n}\n\nvalidateInputs <- function(\n  UCI.HAR.Dataset.Folder\n) {\n  # validate inputs to top-level function. Make\n  # sure directory structure exists and the necessary files\n  # are located therein.\n  if (!file_test('-d',UCI.HAR.Dataset.Folder)) {\n    return(FALSE)\n  }\n  if (!file_test('-d',paste(UCI.HAR.Dataset.Folder,'test',sep='/'))) {\n    return(FALSE)\n  }\n  if (!file_test('-d',paste(UCI.HAR.Dataset.Folder,'train',sep='/'))) {\n    return(FALSE)\n  }\n  if (!file_test('-f',getDatasetFilename(UCI.HAR.Dataset.Folder,'train'))) {\n    return(FALSE)\n  }\n  if (!file_test('-f',getDatasetFilename(UCI.HAR.Dataset.Folder,'test'))) {\n    return(FALSE)\n  }\n  if (!file_test('-f',getActivityColumnFilename(UCI.HAR.Dataset.Folder,'train'))) {\n    return(FALSE)\n  }\n  if (!file_test('-f',getActivityColumnFilename(UCI.HAR.Dataset.Folder,'test'))) {\n    return(FALSE)\n  }\n  if (!file_test('-f',getSubjectColumnFilename(UCI.HAR.Dataset.Folder,'train'))) {\n    return(FALSE)\n  }\n  if (!file_test('-f',getSubjectColumnFilename(UCI.HAR.Dataset.Folder,'test'))) {\n    return(FALSE)\n  }\n  if (!file_test('-f',paste(UCI.HAR.Dataset.Folder,'features.txt',sep='/'))) {\n    return(FALSE)\n  }\n  return(TRUE)\n}\n\nmergeTrainingAndTestSets <- function(\n  UCI.HAR.Dataset.Folder) {\n  # Merge the training and the test sets to create one data set.\n  dtTest  <- getDataSet(UCI.HAR.Dataset.Folder,'test')\n  dtTrain <- getDataSet(UCI.HAR.Dataset.Folder,'train')\n  dts <- rbind(dtTrain,dtTest)\n  return(dts)\n}\n\n\ncreateTidyDataSet <- function(mergedDataSet) {\n  # Create a second, independent tidy data set with the \n  # average of each variable for each activity and each subject.\n  td2 <- melt(mergedDataSet,\n              id=colnames(mergedDataSet)[1:2],\n              measure.vars=colnames(mergedDataSet)\n                  [3:length(colnames(mergedDataSet))])\n  td3 <- arrange(td2,Subject,Activity,variable)\n  td4 <- group_by(td3,Subject,Activity,variable)\n  td5 <- summarize(td4,meanValue = mean(value))\n  v1 <- td5[,1]\n  v2 <- td5[,2]\n  v3 <- td5[,3]\n  v4 <- td5[,4]\n  tidyDataSet <- data.table(v1,v2,v3,v4)\n  return(tidyDataSet)\n}\n\nrun_analysis <- function(UCI.HAR.Dataset.Folder='UCI-HAR-Dataset',\n                         file.name='course.project.dhunscher.txt'\n                ) {\n        mergedDataSet <- NULL\n        tidyDataSet <- NULL\n      \n        ###### MAIN ######\n        \n        ok <- validateInputs(UCI.HAR.Dataset.Folder)\n        \n        if ( !ok ) {\n          stop(\"Invalid input\")\n        }\n        \n        mergedDataSet <- mergeTrainingAndTestSets(UCI.HAR.Dataset.Folder)\n        \n        tidyDataSet <- createTidyDataSet(mergedDataSet)\n        \n        write.table(tidyDataSet,file.name,sep=\",\",row.names=FALSE,eol=\"\\r\\n\")\n        \n        return(TRUE)\n}\n\n\n\n",
    "created" : 1426801383003.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1879968835",
    "id" : "9DB25E3",
    "lastKnownWriteTime" : 1427022682,
    "path" : "~/Box Sync/Coursera-data-science/datasciencecoursera/Getting_And_Cleaning_Data/CourseProject/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}